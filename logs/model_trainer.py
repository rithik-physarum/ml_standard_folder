# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: model_training_agent
# Time Created: 2025-03-26 19:24:50

def model_trainer(data_df):
    import pandas as pd
    import numpy as np
    from sklearn.model_selection import train_test_split, cross_val_score, KFold
    from sklearn.linear_model import LogisticRegression
    from sklearn.metrics import f1_score, confusion_matrix
    import warnings
    # All imports at the beginning of the function, one per line






    # Other imports as needed
    
    # Silence warnings if needed
    warnings.filterwarnings('ignore')
    
    # Extract features and target
    X = data_df.drop('target', axis=1)
    y = data_df['target']
    
    # Model Definition: Logistic Regression with L2 regularization, balanced class weights, and random state
    model = LogisticRegression(C=0.001, class_weight='balanced', random_state=42)
    
    # Cross-Validation setup
    cv = KFold(n_splits=5, shuffle=True, random_state=42)
    
    # Perform cross-validation and calculate F1 scores
    f1_scores = cross_val_score(model, X, y, cv=cv, scoring='f1')
    
    # Calculate mean and standard deviation of F1 scores
    mean_f1 = np.mean(f1_scores)
    std_f1 = np.std(f1_scores)
    
    print(f"Mean F1 score: {mean_f1:.4f}")
    print(f"Standard deviation of F1 scores: {std_f1:.4f}")
    
    # Store confusion matrices for each fold
    confusion_matrices = []
    
    # Train and evaluate the model on each fold to get confusion matrices
    for train_index, test_index in cv.split(X, y):
        X_train, X_test = X.iloc[train_index], X.iloc[test_index]
        y_train, y_test = y.iloc[train_index], y.iloc[test_index]
        
        # Train the model
        model.fit(X_train, y_train)
        
        # Make predictions
        y_pred = model.predict(X_test)
        
        # Calculate confusion matrix
        cm = confusion_matrix(y_test, y_pred)
        confusion_matrices.append(cm)
        
        print("Confusion Matrix:")
        print(cm)
    
    # Train the model on the entire dataset
    model.fit(X, y)
    
    # Make predictions on the entire dataset (for demonstration purposes)
    y_pred_all = model.predict(X)
    
    # Calculate F1 score on the entire dataset
    f1_all = f1_score(y, y_pred_all)
    
    print(f"F1 score on the entire dataset: {f1_all:.4f}")
    
    # Return results as a dictionary
    return {
        'trained_model': model,
        'metrics': {
            'mean_f1_score': mean_f1,
            'std_f1_score': std_f1,
            'f1_score_all': f1_all
        },
        'confusion_matrices': confusion_matrices,
        'predictions': y_pred_all
    }